###############################################################################
# File:         README
# Author:       Alex Brandt
# Date:         2009/09/06
###############################################################################

***********
* INSTALL *
***********

This utility is a minimal pascal compiler that should compile to an intermediary
language appropriate for running in the shazam virtual environment.
This program was created using Gentoo Linux with a 2.6.30 gentoo sources kernel
revision 4 on an X86_64 architecture.
The compiler used for building and testing is gcc version 4.3.2 release 3 in the
portage tree provided by Gentoo (www.gentoo.org).
This software is licensed under the GPL as specified in the file COPYING.

Build Instructions:

$cd <path to build directory>
$cmake <path to source directory>
$make

If you want this installed to /usr type:

$make install

The executable will be in ${build_dir}/src/compiler.

***********************
* Program Description *
***********************

This program utilizes the following:
  1) STL map
  2) STL list
  3) Boost Program Options
  4) STL vector

****************************
* Program Input and Output *
****************************

Input ::
  Options which are parsed from the CLI as well as a set of source files to compile.

Ouput ::
  Outputs any syntax errors in the input file and prints out a semi-meaningful error report.

  Currently this application only parses the file and generates the symbol table.

  Example:

$ src/compiler ../test/test20.p
Got: < Y, 256, 0, 0 >
Expected: 256
Line: 33
Undeclared Identifier

  With the debugging flag set the entire parsing is shown in full detail to find problems with the
  compiler itself if they are suspected.

$ src/compiler ../test/test20.p -d
< PROGRAM, 257, 0, 0 >
< VAR, 257, 0, 0 >
< UP, 256, 0, 0 >
< ,, 259, 0, 0 >
< LO, 256, 0, 0 >
< ;, 259, 0, 0 >
< PROCEDURE, 257, 0, 0 >
< A, 256, 0, 0 >
< ;, 259, 0, 0 >
Level: 0
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< VAR, 257, 0, 0 >
< Y, 256, 0, 0 >
< ,, 259, 0, 0 >
< Z, 256, 0, 0 >
< ;, 259, 0, 0 >
< PROCEDURE, 257, 0, 0 >
< C, 256, 0, 0 >
< ;, 259, 0, 0 >
Level: 0
C, 256, 513, 0
Y, 256, 513, 0
Z, 256, 513, 0
Level: 1
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< VAR, 257, 0, 0 >
< Z, 256, 0x69f450, 1 >
< ,, 259, 0, 0 >
< M, 256, 0, 0 >
< ;, 259, 0, 0 >
< BEGIN, 257, 0, 0 >
< Z, 256, 0x69f830, 0 >
< :=, 259, 0, 0 >
< 12, 258, 0, 0 >
< ;, 259, 0, 0 >
< M, 256, 0x69f970, 0 >
< :=, 259, 0, 0 >
< 7, 258, 0, 0 >
< ;, 259, 0, 0 >
< Y, 256, 0x69f350, 1 >
< :=, 259, 0, 0 >
< Z, 256, 0x69f830, 0 >
< ;, 259, 0, 0 >
< Y, 256, 0x69f350, 1 >
< :=, 259, 0, 0 >
< M, 256, 0x69f970, 0 >
< ;, 259, 0, 0 >
< Y, 256, 0x69f350, 1 >
< :=, 259, 0, 0 >
< Y, 256, 0x69f350, 1 >
< END, 257, 0, 0 >
Level: 0
M, 256, 513, 0
Z, 256, 513, 0
Level: 1
C, 256, 513, 0
Y, 256, 513, 0
Z, 256, 513, 0
Level: 2
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< ;, 259, 0, 0 >
< PROCEDURE, 257, 0, 0 >
< D, 256, 0, 0 >
< ;, 259, 0, 0 >
Level: 0
C, 256, 513, 0
D, 256, 513, 0
Y, 256, 513, 0
Z, 256, 513, 0
Level: 1
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< VAR, 257, 0, 0 >
< Z, 256, 0x69f450, 1 >
< ,, 259, 0, 0 >
< N, 256, 0, 0 >
< ;, 259, 0, 0 >
< BEGIN, 257, 0, 0 >
< Z, 256, 0x6a01f0, 0 >
< :=, 259, 0, 0 >
< 1, 258, 0, 0 >
< ;, 259, 0, 0 >
< Z, 256, 0x6a01f0, 0 >
< :=, 259, 0, 0 >
< Z, 256, 0x6a01f0, 0 >
< *, 259, 0, 0 >
< 10, 258, 0, 0 >
< ;, 259, 0, 0 >
< N, 256, 0x6a0160, 0 >
< :=, 259, 0, 0 >
< (, 259, 0, 0 >
< Z, 256, 0x6a01f0, 0 >
< MOD, 257, 0, 0 >
< 4, 258, 0, 0 >
< ), 259, 0, 0 >
< /, 259, 0, 0 >
< 7, 258, 0, 0 >
< +, 259, 0, 0 >
< 6, 258, 0, 0 >
< ;, 259, 0, 0 >
< CALL, 257, 0, 0 >
< C, 256, 0x69f620, 1 >
< ;, 259, 0, 0 >
< END, 257, 0, 0 >
Level: 0
N, 256, 513, 0
Z, 256, 513, 0
Level: 1
C, 256, 513, 0
D, 256, 513, 0
Y, 256, 513, 0
Z, 256, 513, 0
Level: 2
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< ;, 259, 0, 0 >
< BEGIN, 257, 0, 0 >
< Y, 256, 0x69f350, 0 >
< :=, 259, 0, 0 >
< 0, 258, 0, 0 >
< ;, 259, 0, 0 >
< IF, 257, 0, 0 >
< Y, 256, 0x69f350, 0 >
< =, 259, 0, 0 >
< 0, 258, 0, 0 >
< THEN, 257, 0, 0 >
< Z, 256, 0x69f450, 0 >
< :=, 259, 0, 0 >
< 10, 258, 0, 0 >
< MOD, 257, 0, 0 >
< 4, 258, 0, 0 >
< ;, 259, 0, 0 >
< CALL, 257, 0, 0 >
< D, 256, 0x69f830, 0 >
< END, 257, 0, 0 >
Level: 0
C, 256, 513, 0
D, 256, 513, 0
Y, 256, 513, 0
Z, 256, 513, 0
Level: 1
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< ;, 259, 0, 0 >
< PROCEDURE, 257, 0, 0 >
< B, 256, 0, 0 >
< ;, 259, 0, 0 >
Level: 0
A, 256, 513, 0
B, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< VAR, 257, 0, 0 >
< F, 256, 0, 0 >
< ,, 259, 0, 0 >
< G, 256, 0, 0 >
< ;, 259, 0, 0 >
< BEGIN, 257, 0, 0 >
< F, 256, 0x69c8a0, 0 >
< :=, 259, 0, 0 >
< 7, 258, 0, 0 >
< ;, 259, 0, 0 >
< G, 256, 0x6a10e0, 0 >
< :=, 259, 0, 0 >
< 25, 258, 0, 0 >
< ;, 259, 0, 0 >
< Y, 256, 0, 0 >
Got: < Y, 256, 0, 0 >
Expected: 256
Line: 33
Undeclared Identifier

******************
* Program Design *
******************

The following classes are provided:

SymbolTableEntry ::
  Specification:  symboltableentry.h
  Implementation: symboltableentry.cpp

  Description:
    An entry for a symbol table.  Contains necessary information about
    symbols for the analyzers to do their jobs.

  Fields:
    lexeme  - The string of characters representing this token.
    offset  - The symbols location in memory.
    value   - The token value from the grammar.
    type    - The type of the token for semantic analysis.

SymbolTable ::
  Specification:  symboltable.h
  Implementation: symboltable.cpp

  Description:
    An abstract container that handles lexical scoping for a compiler's
    symbol table.  Behaves similar to a stack for handling scoping and
    keeps track of all entries entrusted to it.

  Fields:
    tables  - The list that contains all of the tables for the different scopes.

**************
* File Index *
**************

File                        Functions/Purpose           Description
----                        -----------------           -----------

src/main.cpp                main                        The main function.
                            AddLexeme                   Add a lexeme to the table.
                            FindLexeme                  Find a lexeme in the table.

include/symboltable.h       SymbolTable class           Specification of the
                            declaration.                SymbolTable class.

include/symboltableentry.h  SymbolTableEntry class      Specification of the
                            declaration.                SymbolTableEntry class.

lib/symboltable.cpp         SymbolTable class           Implementation of the
                            declaration.                SymbolTable class.

lib/symboltableentry.cpp    SymbolTableEntry class      Implementation of the
                            declaration.                SymbolTableEntry class.

lib/CmakeLists.txt          cmake file                  Controls the building of
                                                        these libraries.

src/CMakeLists.txt          cmake file                  Controls the building of
                                                        this executable.

CMakeLists.txt              cmake file                  Orchestrates the build.

COPYING                     GPL Text                    Full text of the GPL.

README              this file

*******************
* Program Testing *
*******************

This program does not perform its fully described functionality yet, but does
fulfill the initial requirements.  It has a fully functioning (but not necessarily
error free) implementation of a symbol table.  The next step will be to add the
lexical analyzer.  The main function of this implementation tests the symbol table
in a fairly rigorous manner.  Test will be placed in a unit testing library as time
allows and as errors are found.

**************
* Known Bugs *
**************

No currently known issues exist with the application.

If bugs are found please email Alex Brandt <alunduil@alunduil.com> with a bugreport.
