###############################################################################
# File:         README
# Author:       Alex Brandt
# Date:         2009/09/30
###############################################################################

***********
* INSTALL *
***********

This utility is a minimal pascal compiler that should compile to an intermediary
language appropriate for running in the shazam virtual environment.
This program was created using Gentoo Linux with a 2.6.30 gentoo sources kernel
revision 4 on an X86_64 architecture.
The compiler used for building and testing is gcc version 4.3.2 release 3 in the
portage tree provided by Gentoo (www.gentoo.org).
This software is licensed under the GPL as specified in the file COPYING.

Build Instructions:

$cd <path to build directory>
$cmake <path to source directory>
$make

If you want this installed to /usr type:

$make install

The executable will be in ${build_dir}/src/compiler.

***********************
* Program Description *
***********************

This program utilizes the following:
  1) STL map
  2) STL list
  3) Boost Program Options
  4) STL vector

****************************
* Program Input and Output *
****************************

Input ::
  Options which are parsed from the CLI as well as a set of source files to compile.

Ouput ::
  Outputs any syntax errors in the input file and prints out a semi-meaningful error report.

  Currently this application only parses the file and generates the symbol table.

  Example:

$ src/compiler ../test/test20.p
Got: < Y, 256, 0, 0 >
Expected: 256
Line: 33
Undeclared Identifier

  With the debugging flag set the entire parsing is shown in full detail to find problems with the
  compiler itself if they are suspected.

$ src/compiler ../test/test20.p -d
< PROGRAM, 257, 0, 0 >
< VAR, 257, 0, 0 >
< UP, 256, 0, 0 >
< ,, 259, 0, 0 >
< LO, 256, 0, 0 >
< ;, 259, 0, 0 >
< PROCEDURE, 257, 0, 0 >
< A, 256, 0, 0 >
< ;, 259, 0, 0 >
Level: 0
A, 256, 513, 0
LO, 256, 513, 0
UP, 256, 513, 0

< VAR, 257, 0, 0 >
< Y, 256, 0, 0 >
< ,, 259, 0, 0 >

...
Cut to conserve space
...

< :=, 259, 0, 0 >
< 25, 258, 0, 0 >
< ;, 259, 0, 0 >
< Y, 256, 0, 0 >
Got: < Y, 256, 0, 0 >
Expected: 256
Line: 33
Undeclared Identifier

******************
* Program Design *
******************

The following classes are provided:

SymbolTableEntry ::
  Specification:  symboltableentry.h
  Implementation: symboltableentry.cpp

  Description:
    An entry for a symbol table.  Contains necessary information about
    symbols for the analyzers to do their jobs.

  Fields:
    lexeme  - The string of characters representing this token.
    offset  - The symbols location in memory.
    value   - The token value from the grammar.
    type    - The type of the token for semantic analysis.

SymbolTable ::
  Specification:  symboltable.h
  Implementation: symboltable.cpp

  Description:
    An abstract container that handles lexical scoping for a compiler's
    symbol table.  Behaves similar to a stack for handling scoping and
    keeps track of all entries entrusted to it.

  Fields:
    tables  - The list that contains all of the tables for the different scopes.

**************
* File Index *
**************

File                        Functions/Purpose           Description
----                        -----------------           -----------

src/main.cpp                main                        The main function.
                            AddLexeme                   Add a lexeme to the table.
                            FindLexeme                  Find a lexeme in the table.

include/symboltable.h       SymbolTable class           Specification of the
                            declaration.                SymbolTable class.

include/symboltableentry.h  SymbolTableEntry class      Specification of the
                            declaration.                SymbolTableEntry class.

lib/symboltable.cpp         SymbolTable class           Implementation of the
                            declaration.                SymbolTable class.

lib/symboltableentry.cpp    SymbolTableEntry class      Implementation of the
                            declaration.                SymbolTableEntry class.

lib/CmakeLists.txt          cmake file                  Controls the building of
                                                        these libraries.

src/CMakeLists.txt          cmake file                  Controls the building of
                                                        this executable.

CMakeLists.txt              cmake file                  Orchestrates the build.

COPYING                     GPL Text                    Full text of the GPL.

README              this file

*******************
* Program Testing *
*******************

This program does not perform its fully described functionality yet, but does
fulfill the initial requirements.  It has a fully functioning (but not necessarily
error free) implementation of a symbol table, lexical analyzer, and parser.  The next
step will be to add the error handling and code generation.  The main function of this
implementation runs the parser and generates the syntax parse tree in a fairly rigorous
manner.

**************
* Known Bugs *
**************

No currently known issues exist with the application.

If bugs are found please email Alex Brandt <alunduil@alunduil.com> with a bugreport.
