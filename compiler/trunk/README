###############################################################################
# File:         README
# Author:       Alex Brandt
# Date:         2009/09/30
###############################################################################

*******************************************************************************
* INSTALL
*******************************************************************************

This utility is a minimal pascal compiler that should compile to an
intermediary language appropriate for running in the shazam virtual
environment.  This program was created using Gentoo Linux with a 2.6.30 gentoo
sources kernel revision 4 on an X86_64 architecture.  The compiler used for
building and testing is gcc version 4.3.2 release 3 in the portage tree
provided by Gentoo (www.gentoo.org).  This software is licensed under the GPL
as specified in the file COPYING.

Build Instructions:

$mkdir -p ${BUILD_DIR}
$cd ${BUILD_DIR}
$cmake ${SRC_DIR}
$make

If you want this installed to /usr/local type:

$make install

The executable will be in ${BUILD_DIR}/src/pl0.

***********************
* Program Description *
***********************

This program utilizes the following:
  1) STL map
  2) STL list
  3) Boost Program Options
  4) STL vector
  5) Boost Lexical Cast

****************************
* Program Input and Output *
****************************

Input ::
  Options which are parsed from the CLI as well as a set of source files to
  compile.

Ouput ::
  Outputs any syntax errors in the input file and prints out a semi-meaningful
  error report.  If any errors are reported the output file will not be
  generated.  A file that will work with the fsti interpreter will be output in
  a.st or whatever filename is specified in the -o option.

  The number of errors printed can be controlled with the -e option.

  Examples:

    $ src/pl0 -o test01.st test01.p
    2: error: expected `operator' but got `< 723, 258, 0, 0 >' token: =
    3: error: expected `operator' but got `< CONST, 257, 0x1131310, 0 >' token: ;
    3: error: expected `operator' but got `< IM, 256, 0, 0 >' token: ;
    3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< +, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< 138, 258, 0, 0 >' token: ;
    3: error: expected `operator' but got `< ,, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< I855, 256, 0, 0 >' token: ;
    3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< +, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< 27202, 258, 0, 0 >' token: ;
    3: error: expected `operator' but got `< ,, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< K4, 256, 0, 0 >' token: ;
    3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< -, 259, 0, 0 >' token: ;
    3: error: expected `operator' but got `< 6, 258, 0, 0 >' token: ;

  With the debugging flag set the entire parsing is shown in full detail to
  find problems with the compiler itself if they are suspected.

    $ src/pl0 -de 3 -o test01.st test01.p
    < PROGRAM, 257, 0x2412650, 0 >
    < CONST, 257, 0x24122d0, 0 >
    < X, 256, 0, 0 >
    2: error: expected `operator' but got `< 723, 258, 0, 0 >' token: =
    < 723, 258, 0, 0 >
    < ,, 259, 0, 0 >
    < S5D107Q4, 256, 0, 0 >
    < =, 259, 0, 0 >
    < 9855408, 258, 0, 0 >
    3: error: expected `operator' but got `< CONST, 257, 0x24122d0, 0 >' token: ;
    3: error: expected `operator' but got `< IM, 256, 0, 0 >' token: ;

**************
* File Index *
**************

include/compiler.h
  - Compiler class declaration.
    * Specification of the Compiler class.

include/errorqueue.h
  - ErrorQueue class declaration.
    * Specification of the ErrorQueue class.

include/instruction.h
  - Instruction class declaration.
    * Specification of the Instruction class.

include/parser.h
  - Parser class declaration.
    * Specification of the Parser class.

include/programstore.h
  - ProgramStore class declaration.
    * Specification of the ProgramStore class.

include/symboltable.h
  - SymbolTable class declaration.
    * Specification of the SymbolTable class.

include/symboltableentry.h
  - SymbolTableEntry class declaration.
    * Specification of the SymbolTableEntry class.

include/token.h
  - Token class declaration.
    * Specification of the Token class.

include/tokenizer.h
  - Tokenizer class declaration.
    * Specification of the Tokenizer class.

lib/errorqueue.cpp
  - ErrorQueue class declaration.
    * Implementation of the ErrorQueue class.

lib/instruction.cpp
  - Instruction class declaration.
    * Implementation of the Instruction class.

lib/parser.cpp
  - Parser class declaration.
    * Implementation of the Parser class.

lib/programstore.cpp
  - ProgramStore class declaration.
    * Implementation of the ProgramStore class.

lib/symboltable.cpp
  - SymbolTable class declaration.
    * Implementation of the SymbolTable class.

lib/symboltableentry.cpp
  - SymbolTableEntry class declaration.
    * Implementation of the SymbolTableEntry class.

lib/token.cpp
  - Token class declaration.
    * Implementation of the Token class.

lib/tokenizer.cpp
  - Tokenizer class declaration.
    * Implementation of the Tokenizer class.

lib/CMakeLists.txt
  - CMake definition file for lib.
    * Defines parser library.
    * Defines symboltable library.
    * Defines tokenizer library.

src/compiler.cpp
  - Compiler class declaration.
    * Implementation of the Compiler class.

src/main.cpp
  - Main function declaration.
    * Creates a Compiler and Runs it.

src/symboltabletest.cpp
  - Main function declaration.
    * Creates a SymbolTable and tests it.
    * Not linked into main executable.

src/CMakeLists.txt
  - CMake definition file for src.
    * Defines pl0 executable.

test/fuzzer.py
  - Python script that generates random PL/0 files.
    * Creates random input files for the pl0 executable.

CMakeLists.txt
  - CMake definition file for this project.
    * Directs compilation of subdirectories.

COPYING
  - Copy of the GPLv2.

README
  - This file.

*******************
* Program Testing *
*******************

A series of test programs can be generated with the fuzzer.py script, but
several tests have already been generated:

ERROR RECOVERY:
  - test01.p
    * This file shows both forms of error recovery in use.
    * Example:
src/pl0  -o test01.st test01.p
2: error: expected `operator' but got `< 723, 258, 0, 0 >' token: =
3: error: expected `operator' but got `< CONST, 257, 0x23bb1a0, 0 >' token: ;
3: error: expected `operator' but got `< IM, 256, 0, 0 >' token: ;
3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< +, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< 138, 258, 0, 0 >' token: ;
3: error: expected `operator' but got `< ,, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< I855, 256, 0, 0 >' token: ;
3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< +, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< 27202, 258, 0, 0 >' token: ;
3: error: expected `operator' but got `< ,, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< K4, 256, 0, 0 >' token: ;
3: error: expected `operator' but got `< =, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< -, 259, 0, 0 >' token: ;
3: error: expected `operator' but got `< 6, 258, 0, 0 >' token: ;

CORRECT EXECUTION:
  - test02.p
    * This file shows that all constructs of the language have properly
        constructed fsti code and execute as expected.
    * Example:
src/pl0 -o test02.st test02.p
echo "3 -3" | fsti test02.st
3 -3 12 10 5 20 4 4 0 0 80 80 100 100 25 25 -25 -25 5 5 10 10 -10 -10 2 2 1 1 3 3 555553 99999 3 3 3 3 3 3 3 99999 2 1 -2 -1 0 1 777 99999

**************
* Known Bugs *
**************

 * CONST identifiers are capable of being assigned to.

No other currently known issues exist within the application.

If bugs are found please email Alex Brandt <alunduil@alunduil.com>.
